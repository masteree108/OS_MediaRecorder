Index: app/src/main/java/com/audioDetectionAPP/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.audioDetectionAPP\n\nimport android.animation.ObjectAnimator\nimport android.annotation.TargetApi\nimport android.content.pm.PackageManager\nimport android.graphics.Color\nimport android.media.AudioFormat\nimport android.media.MediaMetadataRetriever\nimport android.media.MediaPlayer\nimport android.media.MediaRecorder\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Environment.DIRECTORY_MUSIC\nimport android.os.Handler\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.animation.LinearInterpolator\nimport android.widget.ToggleButton\nimport android.widget.SeekBar\nimport androidx.appcompat.app.AlertDialog\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.FileProvider\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport kotlinx.android.synthetic.main.activity_main.*\nimport kotlinx.android.synthetic.main.choosefile.view.*\nimport kotlinx.android.synthetic.main.edit_name.view.*\nimport okhttp3.Call\nimport okhttp3.Callback\nimport okhttp3.Request\nimport okhttp3.Response\nimport java.io.File\nimport java.io.IOException\n\n\n@TargetApi(Build.VERSION_CODES.N)\nclass MainActivity : AppCompatActivity() {\n    lateinit var mediaPlayer: MediaPlayer\n    lateinit var mediaRecorder: MediaRecorder\n    lateinit var animator: ObjectAnimator\n    lateinit var thread: Thread\n    val handler = Handler()\n    lateinit var myUri: Uri\n    lateinit var oriFile: File\n    val dataList = mutableListOf<Data>()\n    lateinit var chooseFileUri: Uri\n    var chooseFilePosition: Int? = null\n    val path_name = \"/recAudio\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        activityInit()\n//        val  sd=Environment.getExternalStorageDirectory();\n//        val path=sd.getPath()+ path_name\n\n    }\n\n    private fun activityInit() {\n        mediaPlayer = MediaPlayer.create(this, R.raw.country_cue_1)\n        animator = ObjectAnimator.ofFloat(imageView, \"rotation\", 0.0f, 360.0f)\n        animator.duration = 2000\n        animator.interpolator = LinearInterpolator()\n        mediaPlayerAndProgressUpdate()\n\n        startAndPauseImageButton.setOnClickListener(playListener)\n        ImageButtonstop.setOnClickListener(playListener)\n        seekBar.setOnSeekBarChangeListener(seekBarListener)\n        progressSeekBar.setOnSeekBarChangeListener(progressSeekBarListener)\n        toggleButtonRecord.setOnClickListener(recordListener)\n        ImageButtonChoose.setOnClickListener(chooseListener)\n        url_get.setOnClickListener(getListener)\n//        startAndPause.setOnClickListener(playListener)\n//        ImageButtonRecord.setOnClickListener(recordListener)\n//        choose.setOnClickListener(chooseListener)\n//        record.setOnClickListener(recordListener)\n        setThread()\n        getPermission()\n        addDirectory()\n\n    }\n\n    private fun addDirectory() {\n        val file = File(getExternalFilesDir(DIRECTORY_MUSIC) ,path_name)\n        if (!file.exists()) {\n            file.mkdir()\n            println(file.absolutePath + path_name + \" is not exists\")\n        } else {\n            println(file.absolutePath + path_name + \" existed\")\n        }\n    }\n\n    private fun mediaPlayerAndProgressUpdate() {\n        mediaPlayer.setOnCompletionListener(mediaPlayerListener)\n        this.progressSeekBar.max = mediaPlayer.duration\n        this.progressSeekBar.progress = 0\n    }\n\n    private fun setThread() {\n        thread = Thread(Runnable {\n            if (progressSeekBar.progress < progressSeekBar.max) {\n                progressSeekBar.progress = mediaPlayer.currentPosition\n            }\n            handler.postDelayed(thread, 200)\n        })\n    }\n\n    private fun getPermission() {\n        if (ActivityCompat.checkSelfPermission(\n                        this,\n                        android.Manifest.permission.RECORD_AUDIO\n                ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            ActivityCompat.requestPermissions(this, arrayOf(android.Manifest.permission.RECORD_AUDIO, android.Manifest.permission.WRITE_EXTERNAL_STORAGE, android.Manifest.permission.READ_EXTERNAL_STORAGE), 0)\n        }\n    }\n\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\n        when (requestCode) {\n            0 -> {\n                if (grantResults[0] == PackageManager.PERMISSION_DENIED) {\n                    AlertDialog.Builder(this)\n                            .setTitle(\"提醒\")\n                            .setMessage(\"無提供麥克風權限將無法使用錄音功能\")\n                            .create()\n                            .show()\n                }\n            }\n        }\n    }\n\n\n    private val playListener = View.OnClickListener {\n        when (it) {\n            startAndPauseImageButton -> {\n                if (mediaPlayer.isPlaying) {\n//                    startAndPause.text = \"Play\"\n                    startAndPauseImageButton.setImageResource(R.drawable.ic_baseline_play_btn)\n                    animator.pause()\n                    mediaPlayer.pause()\n                    handler.removeCallbacks(thread)\n                } else {\n                    if (animator.isPaused) animator.resume()\n                    else {\n                        animator.repeatCount = -1\n                        animator.start()\n//                        println(\"aaaaaa $animator\")\n\n                    }\n//                    startAndPause.text = \"Pause\"\n                    startAndPauseImageButton.setImageResource(R.drawable.ic_baseline_pause_btn)\n                    mediaPlayer.start()\n                    handler.postDelayed(thread, 200)\n                }\n            }\n\n            ImageButtonstop -> {\n                handler.removeCallbacks(thread)\n                animator.end()\n                mediaPlayer.stop()\n                mediaPlayer.prepare()\n                progressSeekBar.progress = 0\n//                mediaPlayer.reset()\n//                startAndPause.setText(\"Play\")\n                startAndPauseImageButton.setImageResource(R.drawable.ic_baseline_play_btn)\n            }\n        }\n    }\n\n    private val seekBarListener = object : SeekBar.OnSeekBarChangeListener {\n        override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\n            mediaPlayer.setVolume(progress / 100f, progress / 100f)\n            textView.text = \"Volume : $progress %\"\n        }\n\n        override fun onStartTrackingTouch(seekBar: SeekBar?) {\n        }\n\n        override fun onStopTrackingTouch(seekBar: SeekBar?) {\n        }\n    }\n\n    private val progressSeekBarListener = object : SeekBar.OnSeekBarChangeListener {\n        override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\n            if (fromUser) mediaPlayer.seekTo(progress)\n        }\n\n        override fun onStartTrackingTouch(seekBar: SeekBar?) {\n            handler.removeCallbacks(thread)\n        }\n\n        override fun onStopTrackingTouch(seekBar: SeekBar?) {\n            handler.post(thread)\n        }\n\n    }\n\n    private val mediaPlayerListener = MediaPlayer.OnCompletionListener {\n        handler.removeCallbacks(thread)\n        mediaPlayer.stop()\n        mediaPlayer.prepare()\n        animator.end()\n//        progressSeekBar.progress = 0\n//        startAndPause.text = \"Play\"\n        startAndPauseImageButton.setImageResource(R.drawable.ic_baseline_play_btn)\n    }\n\n    private val recordListener = View.OnClickListener {\n        it as ToggleButton\n        Log.d(\"toggle\", it.isChecked.toString())\n        if (it.isChecked) {\n            oriFile = File(getExternalFilesDir(DIRECTORY_MUSIC), path_name +\"/new.wav\")\n            myUri = FileProvider.getUriForFile(this, \"day19\", oriFile)\n            mediaRecorder = MediaRecorder()\n            mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC)\n            mediaRecorder.setOutputFormat(AudioFormat.ENCODING_PCM_16BIT);\n            mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);\n            mediaRecorder.setAudioChannels(1);\n            mediaRecorder.setAudioEncodingBitRate(128000);\n            mediaRecorder.setAudioSamplingRate(48000);\n\n            mediaRecorder.setOutputFile(oriFile.absolutePath)\n            mediaRecorder.prepare()\n            mediaRecorder.start()\n        }else{\n            mediaRecorder.stop()\n            mediaRecorder.release()\n\n            val view = LayoutInflater.from(this).inflate(R.layout.edit_name, null)\n            AlertDialog.Builder(this)\n                    .setView(view)\n                    .setTitle(\"命名錄音\")\n                    .setPositiveButton(\"OK\") { dialog, which ->\n                        val newFile = File(getExternalFilesDir(DIRECTORY_MUSIC), path_name+\"/${view.editText.text}.wav\")\n                        oriFile.renameTo(newFile)\n                    }\n                    .setNegativeButton(\"cancel\"){dialog, which ->\n                        oriFile.delete()\n                    }\n                    .create()\n                    .show()\n        }\n//\n    }\n\n    private val chooseListener = View.OnClickListener {\n\n        chooseFilePosition = null\n        dataList.clear()\n        prepareFile()\n\n        val adapter = Adapter(this, dataList)\n        adapter.setOnItemClick(object : Adapter.OnItemClickListener {\n            override fun onClick(position: Int) {\n                if (chooseFilePosition != null) dataList[chooseFilePosition!!].color = Color.argb(0, 0, 0, 0)\n                chooseFilePosition = position\n                dataList[chooseFilePosition!!].color = Color.rgb(194, 194, 194)\n            }\n        })\n\n\n        val view = LayoutInflater.from(this).inflate(R.layout.choosefile, null)\n        view.recyclerView.adapter = adapter\n        view.recyclerView.layoutManager = LinearLayoutManager(this)\n\n        AlertDialog.Builder(this)\n                .setView(view)\n                .setTitle(\"選擇檔案\")\n                .setPositiveButton(\"ok\") { dialog, which ->\n                    if (chooseFilePosition != null) setChooseFile(dataList[chooseFilePosition!!].uri)\n                }\n                .setNegativeButton(\"cancel\") { dialog, which ->\n                }\n                .create()\n                .show()\n\n    }\n\n    private val getListener = View.OnClickListener {\n//        textInfo.text=\"01.01\"\n        val client = UnsafeHttpClient.getUnsafeOkHttpClient().build()\n        val request = Request.Builder()\n            .url(\"https://140.109.22.214:7777/api/ping/\")\n            .build()\n        client.newCall(request).enqueue(object : Callback {\n            override fun onFailure(call: Call, e: IOException) {\n                runOnUiThread { textInfo.text = e.message }\n            }\n\n            @Throws(IOException::class)\n            override fun onResponse(call: Call, response: Response) {\n                val resStr = response.body?.string()\n                runOnUiThread { textInfo.text = resStr }\n            }\n        })\n//        \"https://140.109.22.214:7777/api/ping/\"\n\n\n    }\n\n    private fun prepareFile() {\n//        val oriUri = Uri.parse(\"android.resource://com.example.fish.day19_littlebirdsoundmediaplayermediarecorder/raw/country_cue_1.mp3\")\n//        val initFile = File(oriUri.path)\n        val file = File(getExternalFilesDir(DIRECTORY_MUSIC), path_name)\n        Log.d(\"path\", file.toString()) /*可以看logcat*/\n        val fileList = file.listFiles()\n        val mr = MediaMetadataRetriever()\n\n        for (element in fileList) {\n            dataList.add(getFileInfor(mr, element))\n        }\n//        dataList.add(getFileInfor(mr, initFile))\n    }\n\n    private fun getFileInfor(mr: MediaMetadataRetriever, file: File): Data {\n        val p = \"$DIRECTORY_MUSIC/\"+ path_name\n        mr.setDataSource(file.path)\n        val duration = mr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION)?.toLong()\n        val name = file.name\n        val time: String = \"\"\" ${duration?.div(6000)}:${(duration?.rem(6000) )?.div(1000)}\"\"\"\n        return Data(Uri.fromFile(file), name, time, Color.argb(0, 0, 0, 0))\n    }\n\n    private fun setChooseFile(uri: Uri) {\n        mediaPlayer.release()\n        mediaPlayer = MediaPlayer.create(this, uri)\n        mediaPlayerAndProgressUpdate()\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/audioDetectionAPP/MainActivity.kt	(revision b3e55c2ee6ea9abfd077d74500357f4345d1e3ef)
+++ app/src/main/java/com/audioDetectionAPP/MainActivity.kt	(date 1607971259000)
@@ -286,7 +286,7 @@
             .build()
         client.newCall(request).enqueue(object : Callback {
             override fun onFailure(call: Call, e: IOException) {
-                runOnUiThread { textInfo.text = e.message }
+                runOnUiThread { textInfo.text = "Failed to Connect" }
             }
 
             @Throws(IOException::class)
